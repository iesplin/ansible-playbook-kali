---
# Playbook for Kali

## Personalize Kali
- hosts: all
  become: true
  become_user: "{{ kali_user }}"
  tasks:
    - name: Ensure local directories exist
      ansible.builtin.file:
        path: "{{ kali_user_details.home }}/{{ item }}"
        state: directory
        owner: "{{ kali_user }}"
        group: "{{ kali_user_details.group }}"
        mode: 0750
      loop:
        - ".local/bin"
        - ".pdtm/go/bin"

    # ZSH
    - name: Set PATH
      ansible.builtin.blockinfile:
        path: "{{ kali_user_details.home }}/.zshrc"
        block: export PATH="$HOME/.local/bin:$HOME:/.pdtm/go/bin:$PATH"

     # ZSH Conigure fzf for history
    - name: Configure fzf for history fuzzer
      ansible.builtin.blockinfile:
        path: "{{ kali_user_details.home }}/.zshrc"
        block: |
              #Append this line to ~/.zshrc to enable fzf keybindings for Zsh:
              source /usr/share/doc/fzf/examples/key-bindings.zsh
              #Append this line to ~/.zshrc to enable fuzzy auto-completion for Zsh:
              source /usr/share/doc/fzf/examples/completion.zsh
        marker: "# {mark} FZF block ansible"

    #################### INSTALLL TERMINAL ####################
 # install selected terminal package 

    - name: install selected terminal
      become: true
      become_user: root
      ansible.builtin.apt:
        name: "{{ desired_terminal }}"
        state: present
      register: terminal_install
      until: terminal_install is success
      retries: 1
      delay: 30
      tags: install_terminal

    - name: Set terminator as Default
      become: true
      become_user: root
      community.general.alternatives:
        name: x-terminal-emulator
        path: "/usr/bin/terminator"
      tags: install_terminal
      when:
        - desired_terminal == "terminator"
      
    - name: Set tilix as Default
      become: true
      become_user: root
      community.general.alternatives:
        name: x-terminal-emulator
        path: "/usr/bin/tilix.wrapper"
      tags: install_terminal
      when:
        - desired_terminal == "tilix"

    - name: Set qterminal as Default for tmux
      become: true
      become_user: root
      community.general.alternatives:
        name: x-terminal-emulator
        path: "/usr/bin/qterminal"
      tags: install_terminal
      when:
        - desired_terminal == "tmux"

    - name: Configure tmux to launch on opening shell 
      ansible.builtin.blockinfile:
        path: "{{ kali_user_details.home }}/.zshrc"
        block: |
              if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
                  tmux attach -t default || tmux new -s default
              fi
        marker: "# {mark} tmux block ansible"
      tags: install_terminal
      when:
        - desired_terminal == "tmux"   
     
    - name: Make terminator the default terminalemulator in XFCE
      ansible.builtin.lineinfile:
        path: "{{kali_user_details.home}}/.config/xfce4/helpers.rc"
        regexp : "TerminalEmulator=*"
        line: "TerminalEmulator=terminator" 
      tags: install_terminal    
      when:
        - desired_terminal == "terminator"

    - name: Make tilix the default terminalemulator in XFCE
      ansible.builtin.lineinfile:
        path: "{{kali_user_details.home}}/.config/xfce4/helpers.rc"
        regexp : "TerminalEmulator=*"
        line: "TerminalEmulator=custom-TerminalEmulator" 
      tags: install_terminal    
      when:
        - desired_terminal == "tilix"  

    - name: Make qterminal for TMUX the default terminalemulator in XFCE
      ansible.builtin.lineinfile:
        path: "{{kali_user_details.home}}/.config/xfce4/helpers.rc"
        regexp : "TerminalEmulator=*"
        line: "TerminalEmulator=qterminal" 
      tags: install_terminal    
      when:
        - desired_terminal == "tmux"   

    - name: Copy the terminator config
      ansible.builtin.copy:
        src: "files/terminals/terminator/config"
        dest: "{{ kali_user_details.home }}/.config/terminator/config"
        mode: 0640
      tags: install_terminal
      when:
        - desired_terminal == "terminator"   

    - name: ensures tilix config  dir exists
      file: 
        path: "{{ kali_user_details.home }}/.config/tilix/schemes/"
        state: directory
      tags: install_terminal
      when:
        - desired_terminal == "tilix"  

    - name: Copy the tilix config
      ansible.builtin.synchronize:
        src: "files/terminals/tilix/schemes"
        dest: "{{ kali_user_details.home }}/.config/tilix/"
        rsync_opts:
         - "--chmod=F644"
        mode: push
      tags: install_terminal
      when:
        - desired_terminal == "tilix"  

    - name: Copy the tmux config
      ansible.builtin.copy:
        src: "files/terminals/tmux/.tmux.conf"
        dest: "{{ kali_user_details.home }}/.tmux.conf"
        mode: 0640
      tags: install_terminal
      when:
        - desired_terminal == "tmux"   
    
      #################### #################### ############

     # XFCE settings
    - name: Apply XFCE settings
      community.general.xfconf:
        channel: "{{ item.channel }}"
        property: "{{ item.property }}"
        value_type: "{{ item.type }}"
        value: "{{ item.value }}"
      loop: "{{ xfce_settings }}"
      tags:
        # XFCE not installed for testing
        - molecule-notest
        #- install_terminal
    
    # Firefox personalization
    - name: Set firefox_default_profile_dir fact
      ansible.builtin.set_fact:
        firefox_default_profile_dir: "{{ kali_user_details.home }}/.mozilla/firefox/hacker.default-esr"

    - name: Check if Firefox profile exists
      ansible.builtin.stat:
        path: "{{ firefox_default_profile_dir }}"
      register: firefox_profile_stat

    - name: Create FireFox default profile
      ansible.builtin.command:
        cmd: 'firefox-esr -CreateProfile "hacker {{ firefox_default_profile_dir }}"'
      when: not firefox_profile_stat.stat.exists
      tags:
        # No DISPLAY available
        - molecule-notest

    - name: Copy user.js from quieter-firefox
      ansible.builtin.copy:
        src: /opt/quieter-firefox/user.js
        dest: "{{ firefox_default_profile_dir }}/user.js"
        remote_src: true
      tags:
        # Profile not created
        - molecule-notest

    - name: Copy Firefox ini files
      ansible.builtin.copy:
        src: "files/firefox/{{ item }}"
        dest: "{{ kali_user_details.home }}/.mozilla/firefox/{{ item }}"
        mode: 0640
      loop:
        - installs.ini
        - profiles.ini
      tags:
        # Profile not created
        - molecule-notest

    # VS Code
    - name: Ensure VS Code user directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0700
      loop:
        - "{{ kali_user_details.home }}/.config/Code/User"
        - "{{ kali_user_details.home }}/.vscode"

    - name: Copy VS Code settings
      ansible.builtin.copy:
        src: files/vscode/settings.json
        dest: "{{ kali_user_details.home }}/.config/Code/User/settings.json"
        mode: 0640

    - name: Install VS Code extensions
      ansible.builtin.command:
        cmd: "code --user-data-dir {{ kali_user_details.home }}/.vscode --install-extension {{ item }}"
        chdir: /usr/bin
      register: vscode_install_extension_cmd
      changed_when: "'successfully installed' in vscode_install_extension_cmd.stdout"
      loop: "{{ vscode_extensions | default([]) }}"

    # GDB
    - name: Clone GEF repo
      ansible.builtin.git:
        repo: "https://github.com/hugsy/gef.git"
        dest: "{{ kali_user_details.home }}/gef"
        force: true

    - name: Copy gdb user properties
      ansible.builtin.copy:
        src: "files/gdb/.gdbinit"
        dest: "{{ kali_user_details.home }}/.gdbinit"
        mode: 0640

    # VPN IP widget
    - name: Copy VPN IP script
      ansible.builtin.copy:
        src: files/scripts/xfce4-panel-genmon-vpnip.sh
        dest: "{{ kali_user_details.home }}/.local/bin/xfce4-panel-genmon-vpnip.sh"
        mode: 0750

    - name: Update config for widget
      ansible.builtin.lineinfile:
        path: "{{ kali_user_details.home }}/.config/xfce4/panel/genmon-15.rc"
        regexp: "^Command="
        line: "Command={{ kali_user_details.home }}/.local/bin/xfce4-panel-genmon-vpnip.sh"
      register: genmon_config
      tags:
        - molecule-notest

    - name: Kill widget process to apply config
      ansible.builtin.command:
        cmd: /usr/bin/pkill -f '/usr/lib/x86_64-linux-gnu/xfce4/panel/plugins/libgenmon.so 15'
      when: genmon_config.changed
      tags:
        - molecule-notest

    # ProjectDiscovery tools
    - name: Check if pdtm exists
      ansible.builtin.stat:
        path: "{{ kali_user_details.home }}/.local/bin/pdtm"
      register: pdtm_bin_stat

    - name: Download ProjectDiscovery Tool Manager
      ansible.builtin.unarchive:
        src: https://github.com/projectdiscovery/pdtm/releases/download/v0.0.6/pdtm_0.0.6_linux_amd64.zip
        dest: "{{ kali_user_details.home }}/.local/bin"
        remote_src: true
        include: pdtm
      when: not pdtm_bin_stat.stat.exists

    - name: Update pdtm
      ansible.builtin.command: "{{ kali_user_details.home }}/.local/bin/pdtm -self-update -no-color"
      register: pdtm_update_cmd
      changed_when: "'already updated' not in pdtm_update_cmd.stderr"

    - name: Install all ProjectDiscovery tools
      ansible.builtin.command: "{{ kali_user_details.home }}/.local/bin/pdtm -install-all -no-color"
      register: pdtm_install_tools_cmd
      changed_when: "'installing' in pdtm_install_tools_cmd.stderr"

    - name: Update all ProjectDiscovery tools
      ansible.builtin.command: "{{ kali_user_details.home }}/.local/bin/pdtm -update-all -no-color"
      register: pdtm_update_tools_cmd
      changed_when: "'updating' in pdtm_update_tools_cmd.stderr"

    - name: Create Menu Shortcuts
      become: true
      ansible.builtin.template:
        src: templates/menu_items/menu_item.desktop.j2
        dest: "{{kali_user_details.home}}/.local/share/applications/{{item.command}}"
        #dest: "/home/kali/.local/share/applications/{{item.command}}.desktop"
        mode: "0700"
      with_items:
         - "{{tar_packages}}"
      tags: install_tar_packages 

